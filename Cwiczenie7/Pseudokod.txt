#define N ? // Rozmiar bufora cyklicznego

typedef struct { ... } Towar;
Towar bufor[N];

int wstaw = 0;
int wyjmij = 0;

// Semafory synchronizujące
semaphore WOLNE_MIEJSCA = N;         // Liczba wolnych miejsc w buforze
semaphore GOTOWE_TOWARY = 0;         // Liczba gotowych towarów w buforze
semaphore BLOKADA_WSTAWIANIA = 1;    // Chroni sekcję wstawiania do bufora
semaphore BLOKADA_ODBIERANIA = 1;    // Chroni sekcję wyjmowania z bufora

// Proces PRODUCENT
while (1) {
    Towar towar = PRODUKUJ();        // Produkuj nowy towar

    P(WOLNE_MIEJSCA);                // Czekamy, aż w buforze będzie miejsce
    P(BLOKADA_WSTAWIANIA);           // Blokujemy dostęp do sekcji wstawiania

    bufor[wstaw] = towar;            // Wstawiamy towar do bufora
    wstaw = (wstaw + 1) % N;         // Przesuwamy indeks wstawiania

    V(BLOKADA_WSTAWIANIA);           // Udostępniamy bufor kolejnym producentom
    V(GOTOWE_TOWARY);                // Informujemy konsumenta, że coś czeka
}

// Proces KONSUMENT
while (1) {
    P(GOTOWE_TOWARY);                // Czekamy, aż pojawi się jakiś towar
    P(BLOKADA_ODBIERANIA);           // Blokujemy dostęp do sekcji odbierania

    Towar towar = bufor[wyjmij];     // Wyjmujemy towar z bufora
    wyjmij = (wyjmij + 1) % N;       // Przesuwamy indeks wyjmowania

    V(BLOKADA_ODBIERANIA);           // Udostępniamy bufor kolejnym konsumentom
    V(WOLNE_MIEJSCA);                // Informujemy producenta, że jest miejsce

    KONSUMUJ(towar);                 // Konsumujemy towar
}
